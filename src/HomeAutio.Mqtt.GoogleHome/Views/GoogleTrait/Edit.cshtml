@using HomeAutio.Mqtt.GoogleHome.Extensions
@model HomeAutio.Mqtt.GoogleHome.ViewModels.TraitViewModel

@section Scripts {
    <script src="~/lib/codemirror/lib/codemirror.js"></script>
    <script src="~/lib/codemirror/mode/javascript/javascript.js"></script>
    <link rel="stylesheet" href="~/lib/codemirror/lib/codemirror.css" />

    <script src="//rawgithub.com/zaach/jsonlint/79b553fb65c192add9066da64043458981b3972b/lib/jsonlint.js"></script>
    <script src="~/lib/codemirror/addon/lint/lint.js"></script>
    <script src="~/lib/codemirror/addon/lint/json-lint.js"></script>
    <link rel="stylesheet" href="~/lib/codemirror/addon/lint/lint.css" />

    <script src="~/lib/codemirror/addon/fold/foldcode.js"></script>
    <script src="~/lib/codemirror/addon/fold/brace-fold.js"></script>
    <script src="~/lib/codemirror/addon/fold/foldgutter.js"></script>
    <link rel="stylesheet" href="~/lib/codemirror/addon/fold/foldgutter.css" />

    <script src="~/lib/codemirror/addon/edit/closebrackets.js"></script>
    <script src="~/lib/codemirror/addon/edit/matchbrackets.js"></script>

    <script>
        var codemirrorOptions = {
            mode: "application/json",
            lineNumbers: true,
            foldGutter: true,
            gutters: ["CodeMirror-lint-markers", "CodeMirror-linenumbers", "CodeMirror-foldgutter"],
            lint: true,
            matchBrackets: true,
            autoCloseBrackets: true,
        };

        var attributesEditor = CodeMirror.fromTextArea(document.getElementById("Attributes"), codemirrorOptions);
        var commandsEditor = CodeMirror.fromTextArea(document.getElementById("Commands"), codemirrorOptions);
        var stateEditor = CodeMirror.fromTextArea(document.getElementById("State"), codemirrorOptions);

        var attributeExamples = document.getElementById("attributeExamples");
        var commandExamples = document.getElementById("commandExamples");
        var stateExamples = document.getElementById("stateExamples");

        // Create example accordion item
        var getCardCollapseNode = function (parentId, collapseId, comment, example) {
            var cardNode = document.createElement("div");
            cardNode.className = "card";

            // Header
            var cardHeaderNode = document.createElement("div");
            cardHeaderNode.className = "card-header";

            var cardHeaderButtonNode = document.createElement("button");
            cardHeaderButtonNode.className = "btn btn-primary dropdown-toggle";
            cardHeaderButtonNode.style = "width: 100%";
            cardHeaderButtonNode.dataset.bsToggle = "collapse";
            cardHeaderButtonNode.dataset.bsTarget = "#" + collapseId;
            cardHeaderButtonNode.innerHTML = comment;

            cardHeaderNode.appendChild(cardHeaderButtonNode);

            // Collapse
            var cardCollapseNode = document.createElement("div");
            cardCollapseNode.id = collapseId;
            cardCollapseNode.className = "collapse";
            cardCollapseNode.dataset.bsParent = "#" + parentId;
            var bsCardCollapseNode = new bootstrap.Collapse(cardCollapseNode, { toggle: false });

            // Card body
            var cardBodyNode = document.createElement("div");
            cardBodyNode.className = "card-body";

            var preformattedText = document.createElement("pre");
            preformattedText.innerText = example;

            cardBodyNode.appendChild(preformattedText);
            cardCollapseNode.appendChild(cardBodyNode);

            cardNode.appendChild(cardHeaderNode);
            cardNode.appendChild(cardCollapseNode);

            return cardNode;
        }

        // Templates
        var loadTemplate = function () {
            var traitDropDown = document.getElementById("Trait");
            var traitName = traitDropDown.options[traitDropDown.selectedIndex].text;

            if (traitName !== "Please select") {
                // Dispose any existing accordions
                $(attributeExamples.querySelectorAll(".collapse")).collapse("dispose");
                attributeExamples.innerHTML = "";

                $(commandExamples.querySelectorAll(".collapse")).collapse("dispose");
                commandExamples.innerHTML = "";

                $(stateExamples.querySelectorAll(".collapse")).collapse("dispose");
                stateExamples.innerHTML = "";

                // Make call to get examples for traitName
                $.get("Examples?traitId=" + traitName, function (examples) {
                    // Add new accordions
                    for (var i in examples.attributeExamples) {
                        var parentId = "attributeExamples";
                        var childId = "attributeExample" + i;
                        var comment = examples.attributeExamples[i].comment;
                        var example = examples.attributeExamples[i].example;

                        attributeExamples.appendChild(getCardCollapseNode(parentId, childId, comment, example));
                    }

                    // Add new accordions
                    for (var i in examples.commandExamples) {
                        var parentId = "commandExamples";
                        var childId = "commandExample" + i;
                        var comment = examples.commandExamples[i].comment;
                        var example = examples.commandExamples[i].example;

                        commandExamples.appendChild(getCardCollapseNode(parentId, childId, comment, example));
                    }

                    // Add new accordions
                    for (var i in examples.stateExamples) {
                        var parentId = "stateExamples";
                        var childId = "stateExample" + i;
                        var comment = examples.stateExamples[i].comment;
                        var example = examples.stateExamples[i].example;

                        stateExamples.appendChild(getCardCollapseNode(parentId, childId, comment, example));
                    }
                });
            }
        };

        var openDocumentation = function () {
            var traitDropDown = document.getElementById("Trait");
            var traitName = traitDropDown.options[traitDropDown.selectedIndex].text;

            if (traitName !== "Please select") {
                window.open('https://developers.google.com/actions/smarthome/traits/' + traitName.toLowerCase());
            }
        }

        var challengePinHideShow = function () {
            if ($("#ChallengeType").val() == '2') {
                $('#challengePin-form-group').show();
            } else {
                $('#challengePin-form-group').hide();
            }
        };

        $(function () {
            loadTemplate();
            challengePinHideShow();
            $('#ChallengeType').change(challengePinHideShow);
        });
    </script>

    <style>
        .CodeMirror {
            border: 1px solid #ccc;
            border-radius: 4px;
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
        }
    </style>
}

<div class="trait-page">
    <partial name="_ValidationSummary" />

    <div class="row">
        <div class="col-sm-6 mt-3">
            <div class="card">
                <div class="card-header">
                    <h2>Trait Information</h2>
                </div>
                <form id="editForm" method="post"></form>
                <form id="deleteForm" method="post" asp-action="Delete" asp-route-deviceId="@(Context.Request.Query["deviceId"])" asp-route-traitId="@Model.Trait.ToEnumString()"></form>
                <div class="card-body">
                    <fieldset>
                        <div class="mb-3">
                            <label class="form-label" asp-for="Trait">Trait</label>
                            <select form="editForm" class="form-select" asp-for="Trait" asp-items="@(Html.GetEnumSelectList<HomeAutio.Mqtt.GoogleHome.Models.TraitType>().Where(x => x.Text != "Unknown"))" disabled>
                                <option selected="selected" value="">Please select</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label" asp-for="ChallengeType">Challenge Type</label>
                            <select form="editForm" class="form-select" asp-for="ChallengeType" asp-items="@Html.GetEnumSelectList<HomeAutio.Mqtt.GoogleHome.Models.State.Challenges.ChallengeType>()"></select>
                        </div>

                        <div class="mb-3" id="challengePin-form-group">
                            <label class="form-label" asp-for="ChallengePin">Challenge Pin</label>
                            <input form="editForm" class="form-control" placeholder="Challenge Pin" asp-for="ChallengePin">
                        </div>

                        <div class="mb-3">
                            <label class="form-label" asp-for="Attributes">Attributes</label>
                            <textarea form="editForm" class="form-control" asp-for="Attributes"></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label" asp-for="Commands">Commands</label>
                            <textarea form="editForm" class="form-control" asp-for="Commands"></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label" asp-for="State">State</label>
                            <textarea form="editForm" class="form-control" asp-for="State"></textarea>
                        </div>
                    </fieldset>
                </div>
                <div class="card-footer d-flex justify-content-between align-items-center">
                    <div class="mb-0">
                        <button form="editForm" class="btn btn-primary" name="button" value="update">Update</button>
                        <a asp-controller="GoogleDevice" asp-action="Edit" asp-route-deviceId="@(Context.Request.Query["deviceId"])" class="btn btn-default">Cancel</a>
                    </div>
                    <div class="mb-0">
                        <button form="deleteForm" class="btn btn-danger" name="button" value="delete" onclick="return confirm('Are you sure you want to delete this item?');">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 mt-3">
            <div class="card">
                <div class="card-header card-header d-flex justify-content-between align-items-center">
                    <h2>Examples</h2>
                    <button onclick="openDocumentation()" class="btn btn-warning">Trait documentation</button>
                </div>
                <div class="card-body">
                    <h6>Attribute Examples</h6>
                    <div id="attributeExamples"></div>

                    <h6>Command Examples</h6>
                    <div id="commandExamples"></div>

                    <h6>State Examples</h6>
                    <div id="stateExamples"></div>
                </div>
            </div>
        </div>
    </div>
</div>
